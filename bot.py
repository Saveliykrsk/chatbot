import telebot
import subprocess
import os
import time
import string
import random
import json
from threading import Thread
import re
import traceback

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
TOKEN = "7763700239:AAFyT-ZkcQ9LLnlAK5NM5aXA4-CYBvkLlwg"

bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
user_sessions = {}

# –ü—É—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
CONFIG_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "config")
VPS_DATA_FILE = os.path.join(CONFIG_DIR, "vps_data.json")

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(CONFIG_DIR):
    os.makedirs(CONFIG_DIR)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö VPS
def load_vps_data():
    try:
        if os.path.exists(VPS_DATA_FILE):
            with open(VPS_DATA_FILE, 'r') as f:
                return json.load(f)
        return {}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö VPS: {e}")
        return {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö VPS
def save_vps_data(data):
    try:
        with open(VPS_DATA_FILE, 'w') as f:
            json.dump(data, f, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö VPS: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ VPS
vps_data = load_vps_data()

def execute_command(cmd, input_data=None, shell=True):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–≤–æ–¥"""
    try:
        print(f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {cmd}")
        if input_data:
            process = subprocess.Popen(
                cmd,
                shell=shell,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            stdout, stderr = process.communicate(input=input_data)
        else:
            process = subprocess.Popen(
                cmd,
                shell=shell,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            stdout, stderr = process.communicate()
        
        output = stdout + stderr
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã (–∫–æ–¥ {process.returncode}): {output[:200]}...")
        return output, process.returncode
    except Exception as e:
        error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}\n{traceback.format_exc()}"
        print(error_text)
        return error_text, -1

def generate_random_name(length=8):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(length))

def create_docker_container(chat_id, os_type="ubuntu"):
    """–°–æ–∑–¥–∞–µ—Ç Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker
        output, code = execute_command("docker --version")
        if code != 0:
            return None, "‚ùå –û—à–∏–±–∫–∞: Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker."
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container_name = f"vps-{generate_random_name()}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–∑ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –û–°
        if os_type.lower() == "ubuntu":
            image = "ubuntu:22.04"
        elif os_type.lower() == "debian":
            image = "debian:12"
        else:
            return None, f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –û–°: {os_type}"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        bot.send_message(chat_id, f"üîÑ –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å {os_type}...")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        cmd = f"docker run -d --name {container_name} --restart=always -it {image} /bin/bash -c 'apt-get update && apt-get install -y openssh-server sudo curl && mkdir -p /run/sshd && echo root:root | chpasswd && echo PermitRootLogin yes >> /etc/ssh/sshd_config && service ssh start && curl -s https://sshx.io/get | sh && sleep infinity'"
        output, code = execute_command(cmd)
        
        if code != 0:
            return None, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:\n{output}"
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã
        time.sleep(5)
        
        # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º SSH –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ sshx
        bot.send_message(chat_id, "üîÑ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é SSH –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ sshx...")
        cmd = f"docker exec {container_name} sshx"
        output, code = execute_command(cmd)
        
        if code != 0:
            return None, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ sshx:\n{output}"
        
        # –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        cmd = f"docker inspect -f '{{{{range .NetworkSettings.Networks}}}}{{{{.IPAddress}}}}{{{{end}}}}' {container_name}"
        ip_output, ip_code = execute_command(cmd)
        
        if ip_code != 0:
            ip_address = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        else:
            ip_address = ip_output.strip()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ VPS
        vps_info = {
            "container_name": container_name,
            "os_type": os_type,
            "ip_address": ip_address,
            "created_at": time.strftime("%Y-%m-%d %H:%M:%S"),
            "status": "active",
            "sshx_output": output.strip()
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ VPS
        if str(chat_id) not in vps_data:
            vps_data[str(chat_id)] = []
        
        vps_data[str(chat_id)].append(vps_info)
        save_vps_data(vps_data)
        
        return vps_info, None
        
    except Exception as e:
        error_text = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n{traceback.format_exc()}"
        return None, error_text

def process_vps_creation(chat_id, os_type):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ VPS –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        bot.send_message(chat_id, f"üîÑ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ ({os_type})...")
        
        # –°–æ–∑–¥–∞–µ–º VPS
        vps_info, error = create_docker_container(chat_id, os_type)
        
        if error:
            bot.send_message(chat_id, error)
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            message = f"""‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

üñ•Ô∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VPS**:
‚Ä¢ üîñ –ò–º—è: `{vps_info['container_name']}`
‚Ä¢ üêß –û–°: {vps_info['os_type']}
‚Ä¢ üåê IP: {vps_info['ip_address']}
‚Ä¢ üïí –°–æ–∑–¥–∞–Ω: {vps_info['created_at']}

üìã **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SSH**:
```
{vps_info['sshx_output']}
```

–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /list - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
‚Ä¢ /stop [–∏–º—è] - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
‚Ä¢ /start_server [–∏–º—è] - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
‚Ä¢ /delete [–∏–º—è] - –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
‚Ä¢ /ssh [–∏–º—è] - –ü–æ–ª—É—á–∏—Ç—å SSH –¥–∞–Ω–Ω—ã–µ
"""
            bot.send_message(chat_id, message, parse_mode="Markdown")
        
    except Exception as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPS: {str(e)}\n{traceback.format_exc()}"
        bot.send_message(chat_id, error_text)
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if chat_id in user_sessions:
            del user_sessions[chat_id]

def stop_container(container_name):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
    cmd = f"docker stop {container_name}"
    output, code = execute_command(cmd)
    return code == 0, output

def start_container(container_name):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
    cmd = f"docker start {container_name}"
    output, code = execute_command(cmd)
    return code == 0, output

def delete_container(container_name):
    """–£–¥–∞–ª—è–µ—Ç Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
    cmd = f"docker rm -f {container_name}"
    output, code = execute_command(cmd)
    return code == 0, output

def get_container_ssh(container_name):
    """–ü–æ–ª—É—á–∞–µ—Ç SSH –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    cmd = f"docker exec {container_name} sshx"
    output, code = execute_command(cmd)
    if code == 0:
        return True, output
    return False, output

def setup_freeroot(chat_id):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç freeroot –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    # –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏,
    # –Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Docker
    bot.send_message(chat_id, "‚ö†Ô∏è –ú–µ—Ç–æ–¥ freeroot —É—Å—Ç–∞—Ä–µ–ª. –ò—Å–ø–æ–ª—å–∑—É—é Docker –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VPS...")
    return process_vps_creation(chat_id, "ubuntu")

def process_freeroot_setup(chat_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É freeroot –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    # –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏,
    # –Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Docker
    process_vps_creation(chat_id, "ubuntu")

@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.send_message(message.chat.id, """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /create_ubuntu - –°–æ–∑–¥–∞—Ç—å VPS –Ω–∞ –±–∞–∑–µ Ubuntu
‚Ä¢ /create_debian - –°–æ–∑–¥–∞—Ç—å VPS –Ω–∞ –±–∞–∑–µ Debian
‚Ä¢ /list - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
‚Ä¢ /stop [–∏–º—è] - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
‚Ä¢ /start_server [–∏–º—è] - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
‚Ä¢ /delete [–∏–º—è] - –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
‚Ä¢ /ssh [–∏–º—è] - –ü–æ–ª—É—á–∏—Ç—å SSH –¥–∞–Ω–Ω—ã–µ
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
""")

@bot.message_handler(commands=['create', 'create_ubuntu'])
def create_ubuntu_handler(message):
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id in user_sessions:
        bot.send_message(chat_id, "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    user_sessions[chat_id] = {
        'start_time': time.time()
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = Thread(target=process_vps_creation, args=(chat_id, "ubuntu"))
    thread.daemon = True
    thread.start()
    
    bot.send_message(chat_id, "üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è VPS –Ω–∞ –±–∞–∑–µ Ubuntu...\n"
                           "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

@bot.message_handler(commands=['create_debian'])
def create_debian_handler(message):
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id in user_sessions:
        bot.send_message(chat_id, "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    user_sessions[chat_id] = {
        'start_time': time.time()
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = Thread(target=process_vps_creation, args=(chat_id, "debian"))
    thread.daemon = True
    thread.start()
    
    bot.send_message(chat_id, "üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è VPS –Ω–∞ –±–∞–∑–µ Debian...\n"
                           "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

@bot.message_handler(commands=['list'])
def list_handler(message):
    chat_id = message.chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ VPS –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_vps = vps_data.get(str(chat_id), [])
    
    if not user_vps:
        bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_ubuntu –∏–ª–∏ /create_debian, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
    message_text = "üìã **–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤**:\n\n"
    
    for i, vps in enumerate(user_vps, 1):
        message_text += f"{i}. **{vps['container_name']}**\n"
        message_text += f"   ‚Ä¢ üêß –û–°: {vps['os_type']}\n"
        message_text += f"   ‚Ä¢ üåê IP: {vps['ip_address']}\n"
        message_text += f"   ‚Ä¢ üïí –°–æ–∑–¥–∞–Ω: {vps['created_at']}\n"
        message_text += f"   ‚Ä¢ üìä –°—Ç–∞—Ç—É—Å: {vps['status']}\n\n"
    
    bot.send_message(chat_id, message_text, parse_mode="Markdown")

@bot.message_handler(commands=['stop'])
def stop_handler(message):
    chat_id = message.chat.id
    args = message.text.split()
    
    if len(args) < 2:
        bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: `/stop vps-abcdefgh`", parse_mode="Markdown")
        return
    
    container_name = args[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Å–µ—Ä–≤–µ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_vps = vps_data.get(str(chat_id), [])
    found = False
    
    for vps in user_vps:
        if vps['container_name'] == container_name:
            found = True
            break
    
    if not found:
        bot.send_message(chat_id, f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —Å –∏–º–µ–Ω–µ–º {container_name} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.")
        return
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    bot.send_message(chat_id, f"üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä {container_name}...")
    success, output = stop_container(container_name)
    
    if success:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –¥–∞–Ω–Ω—ã—Ö
        for vps in user_vps:
            if vps['container_name'] == container_name:
                vps['status'] = "stopped"
                break
        
        save_vps_data(vps_data)
        
        bot.send_message(chat_id, f"‚úÖ –°–µ—Ä–≤–µ—Ä {container_name} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ {container_name}:\n{output}")

@bot.message_handler(commands=['start_server'])
def start_server_handler(message):
    chat_id = message.chat.id
    args = message.text.split()
    
    if len(args) < 2:
        bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: `/start_server vps-abcdefgh`", parse_mode="Markdown")
        return
    
    container_name = args[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Å–µ—Ä–≤–µ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_vps = vps_data.get(str(chat_id), [])
    found = False
    
    for vps in user_vps:
        if vps['container_name'] == container_name:
            found = True
            break
    
    if not found:
        bot.send_message(chat_id, f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —Å –∏–º–µ–Ω–µ–º {container_name} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    bot.send_message(chat_id, f"üîÑ –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä {container_name}...")
    success, output = start_container(container_name)
    
    if success:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –¥–∞–Ω–Ω—ã—Ö
        for vps in user_vps:
            if vps['container_name'] == container_name:
                vps['status'] = "active"
                break
        
        save_vps_data(vps_data)
        
        bot.send_message(chat_id, f"‚úÖ –°–µ—Ä–≤–µ—Ä {container_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    else:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ {container_name}:\n{output}")

@bot.message_handler(commands=['delete'])
def delete_handler(message):
    chat_id = message.chat.id
    args = message.text.split()
    
    if len(args) < 2:
        bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: `/delete vps-abcdefgh`", parse_mode="Markdown")
        return
    
    container_name = args[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Å–µ—Ä–≤–µ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_vps = vps_data.get(str(chat_id), [])
    found = False
    vps_index = -1
    
    for i, vps in enumerate(user_vps):
        if vps['container_name'] == container_name:
            found = True
            vps_index = i
            break
    
    if not found:
        bot.send_message(chat_id, f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —Å –∏–º–µ–Ω–µ–º {container_name} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.")
        return
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    bot.send_message(chat_id, f"üîÑ –£–¥–∞–ª—è—é —Å–µ—Ä–≤–µ—Ä {container_name}...")
    success, output = delete_container(container_name)
    
    if success:
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        if vps_index >= 0:
            user_vps.pop(vps_index)
            vps_data[str(chat_id)] = user_vps
            save_vps_data(vps_data)
        
        bot.send_message(chat_id, f"‚úÖ –°–µ—Ä–≤–µ—Ä {container_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    else:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ {container_name}:\n{output}")

@bot.message_handler(commands=['ssh'])
def ssh_handler(message):
    chat_id = message.chat.id
    args = message.text.split()
    
    if len(args) < 2:
        bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: `/ssh vps-abcdefgh`", parse_mode="Markdown")
        return
    
    container_name = args[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Å–µ—Ä–≤–µ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_vps = vps_data.get(str(chat_id), [])
    found = False
    
    for vps in user_vps:
        if vps['container_name'] == container_name:
            found = True
            break
    
    if not found:
        bot.send_message(chat_id, f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —Å –∏–º–µ–Ω–µ–º {container_name} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º SSH –¥–∞–Ω–Ω—ã–µ
    bot.send_message(chat_id, f"üîÑ –ü–æ–ª—É—á–∞—é SSH –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {container_name}...")
    success, output = get_container_ssh(container_name)
    
    if success:
        message_text = f"""üìã **SSH –¥–∞–Ω–Ω—ã–µ –¥–ª—è {container_name}**:

```
{output}
```

üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:
‚Ä¢ –õ–æ–≥–∏–Ω: `root`
‚Ä¢ –ü–∞—Ä–æ–ª—å: `root`
"""
        bot.send_message(chat_id, message_text, parse_mode="Markdown")
    else:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SSH –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {container_name}:\n{output}")

@bot.message_handler(commands=['status'])
def status_handler(message):
    chat_id = message.chat.id
    
    if chat_id in user_sessions:
        elapsed_time = time.time() - user_sessions[chat_id]['start_time']
        bot.send_message(chat_id, f"‚è±Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {elapsed_time:.1f} —Å–µ–∫—É–Ω–¥.")
    else:
        bot.send_message(chat_id, "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")

@bot.message_handler(commands=['help'])
def help_handler(message):
    help_text = """
ü§ñ **Docker VPS Bot**

–ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
‚Ä¢ /create_ubuntu - –°–æ–∑–¥–∞—Ç—å VPS –Ω–∞ –±–∞–∑–µ Ubuntu
‚Ä¢ /create_debian - –°–æ–∑–¥–∞—Ç—å VPS –Ω–∞ –±–∞–∑–µ Debian
‚Ä¢ /list - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
‚Ä¢ /stop [–∏–º—è] - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
‚Ä¢ /start_server [–∏–º—è] - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
‚Ä¢ /delete [–∏–º—è] - –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
‚Ä¢ /ssh [–∏–º—è] - –ü–æ–ª—É—á–∏—Ç—å SSH –¥–∞–Ω–Ω—ã–µ
‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ë–æ—Ç —Å–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –Ω–∞ –±–∞–∑–µ Docker –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç SSH –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ sshx.io.
"""
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")

@bot.message_handler(func=lambda message: True)
def default_handler(message):
    bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        try:
            output, code = execute_command("docker --version")
            if code == 0:
                print(f"Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {output.strip()}")
            else:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {output}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏ Docker: {e}")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Docker
        try:
            output, code = execute_command("docker ps")
            if code == 0:
                print("Docker —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            else:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {output}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Docker: {e}")
        
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}\n{traceback.format_exc()}")
